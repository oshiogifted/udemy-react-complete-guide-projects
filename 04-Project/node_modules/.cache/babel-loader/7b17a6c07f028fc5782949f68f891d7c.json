{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oshio\\\\Documents\\\\Udemy React- Complete Guide Course\\\\04-Project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn'); // return the value of 'isLoggedIn' key\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true); // its fine now, cuz we run it in useEffect()\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    // save to local storage => 1 - logged in, 0 - not logged in\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    //localStorage.setItem('isLoggedIn', '0'); // when user hits logout button, clear local storage (use 0 - diff from 1) or...\n    localStorage.removeItem('isLoggedIn'); // ...same as above\n\n    setIsLoggedIn(false);\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /*  <React.Fragment>  no longer needed since AuthContext acts as the root now*/\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        isLoggedIn: isLoggedIn\n      },\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n        isAuthenticated: isLoggedIn,\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: loginHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 27\n        }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n          onLogout: logoutHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n    /*  </React.Fragment> */\n\n  );\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/oshio/Documents/Udemy React- Complete Guide Course/04-Project/src/App.js"],"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContext","App","isLoggedIn","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACb,UAAMQ,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC,CADa,CAC6D;;AAE1E,QAAIF,6BAA6B,KAAK,GAAtC,EAA2C;AACzCD,MAAAA,aAAa,CAAC,IAAD,CAAb,CADyC,CACpB;AACtB;AACF,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AAEA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AAEAP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GARD;;AAUA,QAAMQ,aAAa,GAAG,MAAM;AAC1B;AACAN,IAAAA,YAAY,CAACO,UAAb,CAAwB,YAAxB,EAF0B,CAEa;;AACvCT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAJD;;AAMA;AAAA;;AACC;AACG,YAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAC3BD,QAAAA,UAAU,EAAEA;AADe,OAA7B;AAAA,8BAGE,QAAC,UAAD;AAAY,QAAA,eAAe,EAAEA,UAA7B;AAAyC,QAAA,QAAQ,EAAES;AAAnD;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,mBACG,CAACT,UAAD,iBAAe,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEK;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADlB,EAEGL,UAAU,iBAAI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAES;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AASH;;AAXD;AAaD;;GAxCQV,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(()=> {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn'); // return the value of 'isLoggedIn' key\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true); // its fine now, cuz we run it in useEffect()\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n\n    // save to local storage => 1 - logged in, 0 - not logged in\n    localStorage.setItem('isLoggedIn', '1');\n\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    //localStorage.setItem('isLoggedIn', '0'); // when user hits logout button, clear local storage (use 0 - diff from 1) or...\n    localStorage.removeItem('isLoggedIn'); // ...same as above\n    setIsLoggedIn(false);\n  };\n\n  return (\n   /*  <React.Fragment>  no longer needed since AuthContext acts as the root now*/\n      <AuthContext.Provider value={{\n        isLoggedIn: isLoggedIn\n      }}>\n        <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n        <main>\n          {!isLoggedIn && <Login onLogin={loginHandler} />}\n          {isLoggedIn && <Home onLogout={logoutHandler} />}\n        </main>\n      </AuthContext.Provider>\n   /*  </React.Fragment> */\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oshio\\\\Documents\\\\Udemy React- Complete Guide Course\\\\04-Project\\\\src\\\\App.js\";\nimport React, { useCOntext } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader'; //import AuthContext from './store/auth-context';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  /* const [isLoggedIn, setIsLoggedIn] = useState(false);\n   useEffect(()=> {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn'); // return the value of 'isLoggedIn' key\n     if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true); // its fine now, cuz we run it in useEffect()\n    }\n  }, []);\n   const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n     // save to local storage => 1 - logged in, 0 - not logged in\n    localStorage.setItem('isLoggedIn', '1');\n     setIsLoggedIn(true);\n  };\n   const logoutHandler = () => {\n    //localStorage.setItem('isLoggedIn', '0'); // when user hits logout button, clear local storage (use 0 - diff from 1) or...\n    localStorage.removeItem('isLoggedIn'); // ...same as above\n    setIsLoggedIn(false);\n  };\n  */\n  return (\n    /*#__PURE__*/\n\n    /*  <React.Fragment>  no longer needed since AuthContext acts as the root now*/\n\n    /* <AuthContext.Provider value={{\n      isLoggedIn: isLoggedIn, // all child components can now listen to changes to isLoggedIn state\n      onLogout: logoutHandler\n    }}> */\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: loginHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 27\n        }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n          onLogout: logoutHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n    /* </AuthContext.Provider> */\n\n    /*  </React.Fragment> */\n\n  );\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/oshio/Documents/Udemy React- Complete Guide Course/04-Project/src/App.js"],"names":["React","useCOntext","Login","Home","MainHeader","App","isLoggedIn","loginHandler","logoutHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB,C,CACA;;;;AAEA,SAASC,GAAT,GAAe;AACb;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOE;AAAA;;AACC;;AACG;AACN;AACA;AACA;AACM,YAAC,KAAD,CAAO,QAAP;AAAA,8BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,mBACG,CAACC,UAAD,iBAAe,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEC;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADlB,EAEGD,UAAU,iBAAI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAEE;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAOC;;AACH;;AAdF;AAgBD;;KA3CQH,G;AA6CT,eAAeA,GAAf","sourcesContent":["import React, {useCOntext} from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\n//import AuthContext from './store/auth-context';\n\nfunction App() {\n  /* const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(()=> {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn'); // return the value of 'isLoggedIn' key\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true); // its fine now, cuz we run it in useEffect()\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n\n    // save to local storage => 1 - logged in, 0 - not logged in\n    localStorage.setItem('isLoggedIn', '1');\n\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    //localStorage.setItem('isLoggedIn', '0'); // when user hits logout button, clear local storage (use 0 - diff from 1) or...\n    localStorage.removeItem('isLoggedIn'); // ...same as above\n    setIsLoggedIn(false);\n  };\n */\n  return (\n   /*  <React.Fragment>  no longer needed since AuthContext acts as the root now*/\n      /* <AuthContext.Provider value={{\n        isLoggedIn: isLoggedIn, // all child components can now listen to changes to isLoggedIn state\n        onLogout: logoutHandler\n      }}> */\n      <React.Fragment>\n        <MainHeader />\n        <main>\n          {!isLoggedIn && <Login onLogin={loginHandler} />}\n          {isLoggedIn && <Home onLogout={logoutHandler} />}\n        </main>\n      </React.Fragment>\n       /* </AuthContext.Provider> */ \n    /*  </React.Fragment> */ \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
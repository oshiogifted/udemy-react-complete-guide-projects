{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oshio\\\\Documents\\\\Udemy React- Complete Guide Course\\\\07-Project\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './components/AddMovie';\n\nfunction App() {\n  /* const dummyMovies = [\n    {\n      id: 1,\n      title: 'Some Dummy Movie',\n      openingText: 'This is the opening text of the movie',\n      releaseDate: '2021-05-18',\n    },\n    {\n      id: 2,\n      title: 'Some Dummy Movie 2',\n      openingText: 'This is the second opening text of the movie',\n      releaseDate: '2021-05-19',\n    },\n  ]; */\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    // GET\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://react-movies-fb42d-default-rtdb.firebaseio.com/movies.json');\n\n      if (!response.ok) {\n        // or !response.statusCode !== 200 \n        throw new Error('Something went wrong');\n      }\n\n      const data = await response.json(); // convert from JSON obj to JS obj\n\n      console.log(data);\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          release: data[key].releaseDate\n        });\n      }\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          release: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []); // no dependency because we're not using any outside state (movies, isLoading, or error)\n  // sends an http request immediately when a component loads\n  // dependency is the function (in case anything in it changes)\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    // POST\n    const response = await fetch('https://react-movies-fb42d-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      // body typically wants a JSON data. so we convert from JS obj to JSON obj\n      headers: {\n        'Content-Type': 'application/json' // describes the content to be sent (i.e., we're sending a content type of JSON (which is why we had to convert above btw)) Note: not required by firebase\n\n      }\n    });\n    const data = await response.json(); // firebase returns json data so we convert to JS obj and console log it\n\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/oshio/Documents/Udemy React- Complete Guide Course/07-Project/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","console","log","loadedMovies","key","push","id","title","openingText","release","releaseDate","transformedMovies","results","map","movieData","episode_id","opening_crawl","release_date","message","addMovieHandler","movie","method","body","JSON","stringify","headers","content","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './components/AddMovie';\n\nfunction App() {\n  /* const dummyMovies = [\n    {\n      id: 1,\n      title: 'Some Dummy Movie',\n      openingText: 'This is the opening text of the movie',\n      releaseDate: '2021-05-18',\n    },\n    {\n      id: 2,\n      title: 'Some Dummy Movie 2',\n      openingText: 'This is the second opening text of the movie',\n      releaseDate: '2021-05-19',\n    },\n  ]; */\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  \n  const fetchMoviesHandler = useCallback(async () => {\n    // GET\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://react-movies-fb42d-default-rtdb.firebaseio.com/movies.json')\n      \n      if (!response.ok) { // or !response.statusCode !== 200 \n        throw new Error('Something went wrong');\n      }\n      \n      const data = await response.json(); // convert from JSON obj to JS obj\n      console.log(data);\n\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title, \n          openingText: data[key].openingText,\n          release: data[key].releaseDate\n        });\n      }\n\n      \n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          release: movieData.release_date\n        }\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []); // no dependency because we're not using any outside state (movies, isLoading, or error)\n  \n  // sends an http request immediately when a component loads\n  // dependency is the function (in case anything in it changes)\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    // POST\n    const response = await fetch('https://react-movies-fb42d-default-rtdb.firebaseio.com/movies.json', {\n      method: 'POST', \n      body: JSON.stringify(movie), // body typically wants a JSON data. so we convert from JS obj to JSON obj\n      headers: {\n        'Content-Type': 'application/json' // describes the content to be sent (i.e., we're sending a content type of JSON (which is why we had to convert above btw)) Note: not required by firebase\n      }\n    });\n    const data = await response.json(); // firebase returns json data so we convert to JS obj and console log it\n    console.log(data);\n  }\n\n  let content = <p>Found no movies.</p>;\n  \n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />\n  }\n  \n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
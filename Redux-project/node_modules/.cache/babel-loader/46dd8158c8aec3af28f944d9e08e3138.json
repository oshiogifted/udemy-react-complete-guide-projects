{"ast":null,"code":"import { createStore } from 'redux';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; // Reducer function\n\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n    //state.counter++; // don't do this...  objects are reference values (this is mutating the existing state)\n    // instead, return NEW STATE OBJECT by overriding the existing state\n    return {\n      counters: state.counter + 1,\n      // don't need this but redux won't merge our state changes so we have to be explicit about it\n      showCounters: state.showCounter\n    };\n  }\n\n  if (action.type === 'increase') {\n    return {\n      // increase counter by a 'certain' amount (aka payload)\n      counters: state.counter + action.amount,\n      showCounters: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counters: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      counter: state.counter,\n      // keep existing state\n      showCounter: !state.showCounter // toggle counter\n\n    };\n  }\n\n  return state;\n}; // Store\n\n\nconst store = createStore(counterReducer); // Export store to be used in index.js - wrap the entire app (or apps u want to have access to the store) with it\n\nexport default store;","map":{"version":3,"sources":["C:/Users/oshio/Documents/Udemy React- Complete Guide Course/Redux-project/src/store/index.js"],"names":["createStore","initialState","counter","showCounter","counterReducer","state","action","type","counters","showCounters","amount","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAGA,MAAMC,YAAY,GAAG;AAACC,EAAAA,OAAO,EAAE,CAAV;AAAaC,EAAAA,WAAW,EAAE;AAA1B,CAArB,C,CACA;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAEvD,MAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACA;AACA,WAAO;AACLC,MAAAA,QAAQ,EAAEH,KAAK,CAACH,OAAN,GAAgB,CADrB;AAEL;AACAO,MAAAA,YAAY,EAAEJ,KAAK,CAACF;AAHf,KAAP;AAKD;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACL;AACAC,MAAAA,QAAQ,EAAEH,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACI,MAF5B;AAGLD,MAAAA,YAAY,EAAEJ,KAAK,CAACF;AAHf,KAAP;AAKD;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AACLC,MAAAA,QAAQ,EAAEH,KAAK,CAACH,OAAN,GAAgB,CADrB;AAELC,MAAAA,WAAW,EAAEE,KAAK,CAACF;AAFd,KAAP;AAID;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLL,MAAAA,OAAO,EAAEG,KAAK,CAACH,OADV;AACmB;AACxBC,MAAAA,WAAW,EAAE,CAACE,KAAK,CAACF,WAFf,CAE2B;;AAF3B,KAAP;AAID;;AAED,SAAOE,KAAP;AACD,CAnCD,C,CAqCA;;;AACA,MAAMM,KAAK,GAAGX,WAAW,CAACI,cAAD,CAAzB,C,CAGA;;AACA,eAAeO,KAAf","sourcesContent":["import { createStore } from 'redux';\r\n\r\n\r\nconst initialState = {counter: 0, showCounter: true};\r\n// Reducer function\r\nconst counterReducer = (state = initialState, action) => {\r\n\r\n  if (action.type === 'increment') {\r\n    //state.counter++; // don't do this...  objects are reference values (this is mutating the existing state)\r\n    // instead, return NEW STATE OBJECT by overriding the existing state\r\n    return {\r\n      counters: state.counter + 1,\r\n      // don't need this but redux won't merge our state changes so we have to be explicit about it\r\n      showCounters: state.showCounter \r\n    }\r\n  }\r\n\r\n  if (action.type === 'increase') {\r\n    return {\r\n      // increase counter by a 'certain' amount (aka payload)\r\n      counters: state.counter + action.amount,\r\n      showCounters: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === 'decrement') {\r\n    return {\r\n      counters: state.counter - 1,\r\n      showCounter: state.showCounter\r\n    }\r\n  }\r\n\r\n  if (action.type === 'toggle') {\r\n    return {\r\n      counter: state.counter, // keep existing state\r\n      showCounter: !state.showCounter // toggle counter\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\n// Store\r\nconst store = createStore(counterReducer);\r\n\r\n\r\n// Export store to be used in index.js - wrap the entire app (or apps u want to have access to the store) with it\r\nexport default store;"]},"metadata":{},"sourceType":"module"}
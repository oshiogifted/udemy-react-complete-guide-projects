{"ast":null,"code":"//import { createStore} from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; // Reducer function #1\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  // idenfier of the piece of state 'name' property is needed\n  initialState: initialState,\n  // initialState is a needed property\n  reducers: {\n    // a map of all the reducers this state slice needs\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.pa7y;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\n/* // Reducer function #2\r\nconst counterReducer = (state = initialState, action) => {\r\n\r\n  if (action.type === 'increment') {\r\n    //state.counter++; // don't do this...  objects are reference values (this is mutating the existing state)\r\n    // instead, return NEW STATE OBJECT by overriding the existing state\r\n    return {\r\n      counter: state.counter + 1,\r\n      // don't need this but redux won't merge our state changes so we have to be explicit about it\r\n      showCounter: state.showCounter \r\n    }\r\n  }\r\n\r\n  if (action.type === 'increase') {\r\n    return {\r\n      // increase counter by a 'certain' amount (aka payload)\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === 'decrement') {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter\r\n    }\r\n  }\r\n\r\n  if (action.type === 'toggle') {\r\n    return {\r\n      counter: state.counter, // keep existing state\r\n      showCounter: !state.showCounter // toggle counter\r\n    };\r\n  }\r\n\r\n  return state;\r\n}; */\n// Store\n//const store = createStore(counterReducer);\n// configureStore is like createStore but it makes merging multiple reducers into one reducer reasier\n\nconst store = configureStore({\n  // 'reducer' property is expected by configureStore\n  // value for 'reducer' can be a single reducer or multiple reducers (that'll get merged into one)\n  // reducer {counter: counterSlice.reducer, counter2: counterSlice2.reducer, etc... } a map of reducers\n  reducer: counterSlice.reducer\n}); // to access the key names that match the method names in createSlice -\n// action idenfiers will be created by redux toolkit\n\nexport const counterActions = counterSlice.actions; // Export store to be used in index.js - wrap the entire app (or apps u want to have access to the store) with it (<Provider><some_app_to_have_access_to_store></Provider>)\n\nexport default store;","map":{"version":3,"sources":["C:/Users/oshio/Documents/Udemy React- Complete Guide Course/Redux-project/src/store/index.js"],"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","pa7y","toggleCounter","store","reducer","counterActions","actions"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAGA,MAAMC,YAAY,GAAG;AAACC,EAAAA,OAAO,EAAE,CAAV;AAAaC,EAAAA,WAAW,EAAE;AAA1B,CAArB,C,CAEA;;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,SADyB;AACd;AACjBJ,EAAAA,YAAY,EAAEA,YAFiB;AAEH;AAC5BK,EAAAA,QAAQ,EAAE;AAAE;AACVC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KAHO;;AAIRO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KANO;;AAORQ,IAAAA,QAAQ,CAAEF,KAAF,EAASG,MAAT,EAAiB;AACvBH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,IAAvC;AACD,KATO;;AAURC,IAAAA,aAAa,CAAEL,KAAF,EAAS;AACpBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAZO;AAHqB,CAAD,CAAhC;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AACA,MAAMW,KAAK,GAAGd,cAAc,CAAC;AAC3B;AACA;AACA;AACAe,EAAAA,OAAO,EAAEX,YAAY,CAACW;AAJK,CAAD,CAA5B,C,CAOA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAApC,C,CAEP;;AACA,eAAeH,KAAf","sourcesContent":["//import { createStore} from 'redux';\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState = {counter: 0, showCounter: true};\r\n\r\n// Reducer function #1\r\nconst counterSlice = createSlice({\r\n  name: 'counter', // idenfier of the piece of state 'name' property is needed\r\n  initialState: initialState, // initialState is a needed property\r\n  reducers: { // a map of all the reducers this state slice needs\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase (state, action) {\r\n      state.counter = state.counter + action.pa7y;\r\n    },\r\n    toggleCounter (state) {\r\n      state.showCounter = !state.showCounter;\r\n    }\r\n  }\r\n});\r\n\r\n\r\n/* // Reducer function #2\r\nconst counterReducer = (state = initialState, action) => {\r\n\r\n  if (action.type === 'increment') {\r\n    //state.counter++; // don't do this...  objects are reference values (this is mutating the existing state)\r\n    // instead, return NEW STATE OBJECT by overriding the existing state\r\n    return {\r\n      counter: state.counter + 1,\r\n      // don't need this but redux won't merge our state changes so we have to be explicit about it\r\n      showCounter: state.showCounter \r\n    }\r\n  }\r\n\r\n  if (action.type === 'increase') {\r\n    return {\r\n      // increase counter by a 'certain' amount (aka payload)\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === 'decrement') {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter\r\n    }\r\n  }\r\n\r\n  if (action.type === 'toggle') {\r\n    return {\r\n      counter: state.counter, // keep existing state\r\n      showCounter: !state.showCounter // toggle counter\r\n    };\r\n  }\r\n\r\n  return state;\r\n}; */\r\n\r\n\r\n// Store\r\n//const store = createStore(counterReducer);\r\n// configureStore is like createStore but it makes merging multiple reducers into one reducer reasier\r\nconst store = configureStore({\r\n  // 'reducer' property is expected by configureStore\r\n  // value for 'reducer' can be a single reducer or multiple reducers (that'll get merged into one)\r\n  // reducer {counter: counterSlice.reducer, counter2: counterSlice2.reducer, etc... } a map of reducers\r\n  reducer: counterSlice.reducer \r\n});\r\n\r\n// to access the key names that match the method names in createSlice -\r\n// action idenfiers will be created by redux toolkit\r\nexport const counterActions = counterSlice.actions;\r\n\r\n// Export store to be used in index.js - wrap the entire app (or apps u want to have access to the store) with it (<Provider><some_app_to_have_access_to_store></Provider>)\r\nexport default store; "]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  // idenfier of the piece of state 'name' property is needed\n  initialState: initialState,\n  // initialState is a needed property\n  reducers: {\n    // a map of all the reducers this state slice needs\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // Reducer function\n\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n    //state.counter++; // don't do this...  objects are reference values (this is mutating the existing state)\n    // instead, return NEW STATE OBJECT by overriding the existing state\n    return {\n      counter: state.counter + 1,\n      // don't need this but redux won't merge our state changes so we have to be explicit about it\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'increase') {\n    return {\n      // increase counter by a 'certain' amount (aka payload)\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      counter: state.counter,\n      // keep existing state\n      showCounter: !state.showCounter // toggle counter\n\n    };\n  }\n\n  return state;\n}; // Store\n\n\nconst store = createStore(counterReducer); // Export store to be used in index.js - wrap the entire app (or apps u want to have access to the store) with it\n\nexport default store;","map":{"version":3,"sources":["C:/Users/oshio/Documents/Udemy React- Complete Guide Course/Redux-project/src/store/index.js"],"names":["createStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","counterReducer","type","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAG;AAACC,EAAAA,OAAO,EAAE,CAAV;AAAaC,EAAAA,WAAW,EAAE;AAA1B,CAArB;AAEA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC/BK,EAAAA,IAAI,EAAE,SADyB;AACd;AACjBJ,EAAAA,YAAY,EAAEA,YAFiB;AAEH;AAC5BK,EAAAA,QAAQ,EAAE;AAAE;AACVC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KAHO;;AAIRO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACN,OAAN;AACD,KANO;;AAORQ,IAAAA,QAAQ,CAAEF,KAAF,EAASG,MAAT,EAAiB;AACvBH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAAvC;AACD,KATO;;AAURC,IAAAA,aAAa,CAAEL,KAAF,EAAS;AACpBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAZO;AAHqB,CAAD,CAAhC,C,CAoBA;;AACA,MAAMW,cAAc,GAAG,CAACN,KAAK,GAAGP,YAAT,EAAuBU,MAAvB,KAAkC;AAEvD,MAAIA,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACA;AACA,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CADpB;AAEL;AACAC,MAAAA,WAAW,EAAEK,KAAK,CAACL;AAHd,KAAP;AAKD;;AAED,MAAIQ,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACL;AACAb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAF3B;AAGLT,MAAAA,WAAW,EAAEK,KAAK,CAACL;AAHd,KAAP;AAKD;;AAED,MAAIQ,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEK,KAAK,CAACL;AAFd,KAAP;AAID;;AAED,MAAIQ,MAAM,CAACI,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OADV;AACmB;AACxBC,MAAAA,WAAW,EAAE,CAACK,KAAK,CAACL,WAFf,CAE2B;;AAF3B,KAAP;AAID;;AAED,SAAOK,KAAP;AACD,CAnCD,C,CAqCA;;;AACA,MAAMQ,KAAK,GAAGjB,WAAW,CAACe,cAAD,CAAzB,C,CAGA;;AACA,eAAeE,KAAf","sourcesContent":["import { createStore } from 'redux';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState = {counter: 0, showCounter: true};\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter', // idenfier of the piece of state 'name' property is needed\r\n  initialState: initialState, // initialState is a needed property\r\n  reducers: { // a map of all the reducers this state slice needs\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase (state, action) {\r\n      state.counter = state.counter + action.amount;\r\n    },\r\n    toggleCounter (state) {\r\n      state.showCounter = !state.showCounter;\r\n    }\r\n  }\r\n});\r\n\r\n\r\n// Reducer function\r\nconst counterReducer = (state = initialState, action) => {\r\n\r\n  if (action.type === 'increment') {\r\n    //state.counter++; // don't do this...  objects are reference values (this is mutating the existing state)\r\n    // instead, return NEW STATE OBJECT by overriding the existing state\r\n    return {\r\n      counter: state.counter + 1,\r\n      // don't need this but redux won't merge our state changes so we have to be explicit about it\r\n      showCounter: state.showCounter \r\n    }\r\n  }\r\n\r\n  if (action.type === 'increase') {\r\n    return {\r\n      // increase counter by a 'certain' amount (aka payload)\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === 'decrement') {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter\r\n    }\r\n  }\r\n\r\n  if (action.type === 'toggle') {\r\n    return {\r\n      counter: state.counter, // keep existing state\r\n      showCounter: !state.showCounter // toggle counter\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\n// Store\r\nconst store = createStore(counterReducer);\r\n\r\n\r\n// Export store to be used in index.js - wrap the entire app (or apps u want to have access to the store) with it\r\nexport default store;"]},"metadata":{},"sourceType":"module"}